from flask import Flask, request, jsonify, render_template
import os
import requests
from transformers import pipeline
import PyPDF2
from docx import Document

app = Flask(__name__)

# Load summarization model
summarizer = pipeline("summarization")

# NewsAPI configuration
NEWS_API_KEY = '62c3ce43d8c34f268ca2269a68d482c1'  # Replace with your NewsAPI key
NEWS_API_URL = 'https://newsapi.org/v2/top-headlines'

# File upload directory
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Home route to serve the frontend
@app.route('/')
def home():
    return render_template('index.html')

# File upload route
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file:
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filepath)
        summary = summarize_file(filepath)
        return jsonify({"filename": file.filename, "summary": summary})

# Helper function to summarize file content
def summarize_file(filepath):
    try:
        if filepath.endswith('.pdf'):
            # Extract text from PDF
            with open(filepath, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text()
        elif filepath.endswith('.docx'):
            # Extract text from DOCX
            doc = Document(filepath)
            text = "\n".join([para.text for para in doc.paragraphs])
        else:
            # Assume it's a plain text file
            with open(filepath, 'r') as file:
                text = file.read()

        print("Extracted text:", text)  # Debug: Print extracted text
        if not text:
            return "File is empty or could not be read."

        # Truncate text to fit within the model's token limit
        max_tokens = 500
        truncated_text = " ".join(text.split()[:max_tokens])

        # Summarize the text
        summary = summarizer(truncated_text, max_length=130, min_length=30, do_sample=False)
        return summary[0]['summary_text']
    except Exception as e:
        print("Error summarizing file:", e)  # Debug: Print any errors
        return "An error occurred while summarizing the file."

# News recommendation route
@app.route('/news', methods=['GET'])
def get_news():
    category = request.args.get('category', 'politics')  # Default to 'politics'
    print(f"Fetching news for category: {category}")  # Debug: Print the category

    params = {
        'category': category,
        'apiKey': NEWS_API_KEY,
        'country': 'us'
    }

    try:
        response = requests.get(NEWS_API_URL, params=params)
        print("NewsAPI response status code:", response.status_code)  # Debug: Print status code
        if response.status_code == 200:
            articles = response.json().get('articles', [])
            print(f"Number of articles fetched: {len(articles)}")  # Debug: Print number of articles
            return jsonify(articles)
        else:
            print("NewsAPI error:", response.text)  # Debug: Print error response
            return jsonify({"error": "Failed to fetch news"}), response.status_code
    except Exception as e:
        print("Error fetching news:", e)  # Debug: Print any exceptions
        return jsonify({"error": "An error occurred while fetching news"}), 500

if __name__ == '__main__':
    app.run(debug=True)
